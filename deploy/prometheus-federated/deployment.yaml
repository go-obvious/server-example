apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: prometheus-agent
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: prometheus-agent
    app.kubernetes.io/part-of: prometheus-agent
    app.kubernetes.io/version: v2.50.1
  name: prometheus-agent-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-agent-clusterrole
rules:
  # Core API Group Permissions
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - nodes/stats
      - nodes/spec
      - nodes/metrics/cadvisor
      - endpoints
      - services
      - pods
      - configmaps
    verbs:
      - get
      - list
      - watch
      - update # Include 'update' only if necessary
    # Extensions and Networking API Groups
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingresses/status
    verbs:
      - get
      - list
      - watch
    # Discovery API Group
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
    # Non-Resource URLs
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-agent-clusterrolebinding
subjects:
  - kind: ServiceAccount
    name: prometheus-agent-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: prometheus-agent-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: prometheus-agent-federated
spec:
  selector:
    matchLabels:
      app: prometheus-agent-federated
  template:
    metadata:
      labels:
        app: prometheus-agent-federated
    spec:
      serviceAccountName: prometheus-agent-sa
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      volumes:
        - name: config-volume
          emptyDir: {}
        - name: cloudzero-api-key
          secret:
            secretName: cz-api-token
      initContainers:
        - name: prometheus-configurator
          image: busybox
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - /bin/sh
            - -c
            - |
              # Log the configuration content
              echo "Writing prometheus.yml with the following target:"
              echo "$NODE_NAME"

              # Write to prometheus.yml using HEREDOC with proper indentation
              cat <<EOF > /opt/prometheus/prometheus.yml
              global:
                scrape_interval: 60s
              remote_write:
                #- url: http://remote-write-receiver.cirrus.svc.cluster.local/v1/container-metrics?cluster_name=rancher-stack&cloud_account_id=01234567890&region=us-east-1
                - url: http://remote-write-receiver.cirrus.svc.cluster.local/metrics?cluster_name=rancher-stack&cloud_account_id=01234567890&region=us-east-1
                  headers:
                    "organization_id": "3e0e0d25-b482-4e61-aa52-9994b2dcd51e"
                  remote_timeout: 30s
                  write_relabel_configs:
                    - source_labels: [__name__]
                      regex: '^(kube_node_info|kube_node_status_capacity|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_labels|kube_pod_info|container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total)$'
                      action: keep
                  queue_config:
                    capacity: 100000
                    max_shards: 100
                    min_shards: 1
                    max_samples_per_send: 10000
                    batch_send_deadline: 5s
                    min_backoff: 30ms
                    max_backoff: 5s
                  metadata_config:
                      send: false
                      send_interval: 1m
                      max_samples_per_send: 10000
              scrape_configs:
                - job_name: cloudzero-nodes-cadvisor
                  honor_timestamps: true
                  scrape_interval: 60s
                  scrape_timeout: 10s
                  metrics_path: /metrics
                  scheme: https
                  enable_compression: true
                  authorization:
                    type: Bearer
                    credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    insecure_skip_verify: true
                  follow_redirects: true
                  enable_http2: true
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_node_name]
                      regex: "$NODE_NAME"
                      action: keep
                    - separator: ;
                      regex: __meta_kubernetes_node_label_(.+)
                      replacement: \$1
                      action: labelmap
                    - separator: ;
                      regex: (.*)
                      target_label: __address__
                      replacement: kubernetes.default.svc:443
                      action: replace
                    - source_labels: [__meta_kubernetes_node_name]
                      separator: ;
                      regex: (.+)
                      target_label: __metrics_path__
                      replacement: /api/v1/nodes/\$1/proxy/metrics/cadvisor
                      action: replace
                    - source_labels: [__meta_kubernetes_node_name]
                      separator: ;
                      regex: (.*)
                      target_label: node
                      replacement: \$1
                      action: replace
                  metric_relabel_configs:
                    - separator: ;
                      regex: ^(board_asset_tag|container|created_by_kind|created_by_name|image|instance|name|namespace|node|node_kubernetes_io_instance_type|pod|product_name|provider_id|resource|unit|uid|_.*|label_.*|app.kubernetes.io/*|k8s.*)$
                      replacement: \$1
                      action: labelkeep
                    - source_labels: [__name__]
                      separator: ;
                      regex: ^(container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total)$
                      replacement: \$1
                      action: keep
                  kubernetes_sd_configs:
                    - role: node
              EOF

              # Display the generated configuration
              cat /opt/prometheus/prometheus.yml
          volumeMounts:
            - name: config-volume
              mountPath: /opt/prometheus

      containers:
        - name: prometheus-agent-federated
          image: quay.io/prometheus/prometheus:v2.50.1
          args:
            - "--config.file=/opt/prometheus/prometheus.yml"
            - "--web.enable-lifecycle"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc"
          ports:
            - containerPort: 9090
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          volumeMounts:
            - name: config-volume
              mountPath: /opt/prometheus
            - name: cloudzero-api-key
              mountPath: /etc/config/prometheus/secrets/
              readOnly: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-agent-ksm
spec:
  selector:
    matchLabels:
      app: prometheus-agent-ksm
  template:
    metadata:
      labels:
        app: prometheus-agent-ksm
    spec:
      serviceAccountName: prometheus-agent-sa
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      volumes:
        - name: config-volume
          emptyDir: {}
        - name: cloudzero-api-key
          secret:
            secretName: cz-api-token
      initContainers:
        - name: prometheus-configurator
          image: busybox
          command:
            - /bin/sh
            - -c
            - |
              # Log message
              echo "Writing prometheus.yml configuration"

              # Write to prometheus.yml using HEREDOC with proper indentation
              cat <<EOF > /opt/prometheus/prometheus.yml
              global:
                scrape_interval: 60s
              remote_write:
                - url: http://remote-write-receiver.cirrus.svc.cluster.local/metrics?cluster_name=rancher-stack&cloud_account_id=01234567890&region=us-east-1
                  headers:
                    "organization_id": "3e0e0d25-b482-4e61-aa52-9994b2dcd51e"
                  remote_timeout: 30s
                  write_relabel_configs:
                    - source_labels: [__name__]
                      regex: '^(kube_node_info|kube_node_status_capacity|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_labels|kube_pod_info|container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total)$'
                      action: keep
                  queue_config:
                    capacity: 100000
                    max_shards: 100
                    min_shards: 1
                    max_samples_per_send: 10000
                    batch_send_deadline: 5s
                    min_backoff: 30ms
                    max_backoff: 5s
                  metadata_config:
                    send: false
                    send_interval: 1m
              scrape_configs:
                - job_name: 'kube-state-metrics-node'
                  honor_timestamps: true
                  scrape_interval: 60s
                  scrape_timeout: 10s
                  metrics_path: /metrics
                  scheme: http
                  enable_compression: true
                  follow_redirects: true
                  enable_http2: true
                  relabel_configs:
                    - separator: ;
                      regex: __meta_kubernetes_service_label_(.+)
                      replacement: \$1
                      action: labelmap
                    - source_labels: [__meta_kubernetes_namespace]
                      separator: ;
                      regex: (.*)
                      target_label: namespace
                      replacement: \$1
                      action: replace
                    - source_labels: [__meta_kubernetes_service_name]
                      separator: ;
                      regex: (.*)
                      target_label: service
                      replacement: \$1
                      action: replace
                    - source_labels: [__meta_kubernetes_pod_node_name]
                      separator: ;
                      regex: (.*)
                      target_label: node
                      replacement: \$1
                      action: replace
                  metric_relabel_configs:
                    - source_labels: [__name__]
                      separator: ;
                      regex: '^(kube_node_info|kube_node_status_capacity)$'
                      action: keep
                    - separator: ;
                      regex: '^(board_asset_tag|container|created_by_kind|created_by_name|image|instance|name|namespace|node|node_kubernetes_io_instance_type|pod|product_name|provider_id|resource|unit|uid|_.*|label_.*|app.kubernetes.io/.*|k8s.*)$'
                      action: labelkeep
                  static_configs:
                    - targets:
                        - kube-state-metrics.monitors.svc.cluster.local:8080
                - job_name: 'kube-state-metrics-pods'
                  honor_timestamps: true
                  scrape_interval: 60s
                  scrape_timeout: 10s
                  metrics_path: /metrics
                  scheme: http
                  enable_compression: true
                  follow_redirects: true
                  enable_http2: true
                  relabel_configs:
                    - separator: ;
                      regex: __meta_kubernetes_service_label_(.+)
                      replacement: \$1
                      action: labelmap
                    - source_labels: [__meta_kubernetes_namespace]
                      separator: ;
                      regex: (.*)
                      target_label: namespace
                      replacement: \$1
                      action: replace
                    - source_labels: [__meta_kubernetes_service_name]
                      separator: ;
                      regex: (.*)
                      target_label: service
                      replacement: \$1
                      action: replace
                    - source_labels: [__meta_kubernetes_pod_node_name]
                      separator: ;
                      regex: (.*)
                      target_label: node
                      replacement: \$1
                      action: replace
                  metric_relabel_configs:
                    - source_labels: [__name__]
                      separator: ;
                      regex: '^(kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_labels|kube_pod_info)$'
                      action: keep
                    - separator: ;
                      regex: '^(board_asset_tag|container|created_by_kind|created_by_name|image|instance|name|namespace|node|node_kubernetes_io_instance_type|pod|product_name|provider_id|resource|unit|uid|_.*|label_.*|app.kubernetes.io/.*|k8s.*)$'
                      action: labelkeep
                  static_configs:
                    - targets:
                        - kube-state-metrics.monitors.svc.cluster.local:8080
              EOF

              # Display the generated configuration
              cat /opt/prometheus/prometheus.yml
          volumeMounts:
            - name: config-volume
              mountPath: /opt/prometheus

      containers:
        - name: prometheus-agent-ksm
          image: quay.io/prometheus/prometheus:v2.50.1
          args:
            - "--config.file=/opt/prometheus/prometheus.yml"
            - "--web.enable-lifecycle"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc"
          ports:
            - containerPort: 9090
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          volumeMounts:
            - name: config-volume
              mountPath: /opt/prometheus
            - name: cloudzero-api-key
              mountPath: /etc/config/prometheus/secrets/
              readOnly: true
